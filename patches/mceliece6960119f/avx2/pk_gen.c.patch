--- a/pk_gen.c	
+++ b/pk_gen.c	
@@ -165,7 +165,7 @@
 
 
 /* extract numbers represented in bitsliced form */
-static void de_bitslicing(uint64_t * out, const vec256 in[][GFBITS])
+static void de_bitslicing(uint64_t * out, vec256 in[][GFBITS])
 {
 	int i, j, r;
 	uint64_t u = 0;
@@ -206,7 +206,7 @@
 static void to_bitslicing_2x(vec256 out0[][GFBITS], vec256 out1[][GFBITS], const uint64_t * in)
 {
 	int i, j, k, r;
-	uint64_t u[2][4];
+	uint64_t u[2][4] = {{0}};
 
 	for (i = 0; i < 32; i++)
 	for (j = GFBITS-1; j >= 0; j--)
@@ -320,7 +320,7 @@
 /* output: pk, the public key*/
 /*         pivots, positions of pivots in the 32 x 64 matrix */
 /* return: 0 if pk is successfully generated, -1 otherwise */
-int pk_gen(unsigned char * pk, const unsigned char * irr, uint32_t * perm, int16_t * pi, uint64_t * pivots)
+int pk_gen(unsigned char * pk, const unsigned char * irr, const uint32_t * perm, int16_t * pi, uint64_t * pivots)
 {
 //	const int nBlocks_I = (PK_NROWS + 255) / 256;
 	const int head = PK_NROWS % 64;
