--- avx2/controlbits.c	2022-11-01 14:18:00.878835159 +0100
+++ fixed/controlbits.c	2022-11-02 09:51:39.539135579 +0100
@@ -3,6 +3,7 @@
 /* See also https://cr.yp.to/papers/controlbits-20200923.pdf */
 
 #include <string.h>
+#include "compat.h"
 #include "crypto_declassify.h"
 #include "controlbits.h"
 #include "int32_sort.h"
@@ -39,14 +40,14 @@
     int32 Ax = A[x];
     int32 px = Ax&0xffff;
     int32 cx = int32_min(px,x);
-    B[x] = (px<<16)|cx;
+    B[x] = ((px)<<16)|cx;
   }
   /* B = (p<<16)+c */
 
-  for (x = 0;x < n;++x) A[x] = (A[x]<<16)|x; /* A = (pibar<<16)+id */
+  for (x = 0;x < n;++x) A[x] = (((uint32_t)A[x])<<16)|x; /* A = (pibar<<16)+id */
   int32_sort(A,n); /* A = (id<<16)+pibar^-1 */
 
-  for (x = 0;x < n;++x) A[x] = (A[x]<<16)+(B[x]>>16); /* A = (pibar^(-1)<<16)+pibar */
+  for (x = 0;x < n;++x) A[x] = (((uint32_t)A[x])<<16)+(B[x]>>16); /* A = (pibar^(-1)<<16)+pibar */
   int32_sort(A,n); /* A = (id<<16)+pibar^2 */
 
   if (w <= 10) {
@@ -58,7 +59,7 @@
       for (x = 0;x < n;++x) A[x] = ((B[x]&~0x3ff)<<6)|x; /* A = (p<<16)+id */
       int32_sort(A,n); /* A = (id<<16)+p^{-1} */
 
-      for (x = 0;x < n;++x) A[x] = (A[x]<<20)|B[x]; /* A = (p^{-1}<<20)+(p<<10)+c */
+      for (x = 0;x < n;++x) A[x] = ((uint32_t)A[x]<<20)|B[x]; /* A = (p^{-1}<<20)+(p<<10)+c */
       int32_sort(A,n); /* A = (id<<20)+(pp<<10)+cp */
 
       for (x = 0;x < n;++x) {
@@ -69,7 +70,7 @@
     }
     for (x = 0;x < n;++x) B[x] &= 0x3ff;
   } else {
-    for (x = 0;x < n;++x) B[x] = (A[x]<<16)|(B[x]&0xffff);
+    for (x = 0;x < n;++x) B[x] = (((uint32_t)A[x])<<16)|(B[x]&0xffff);
 
     for (i = 1;i < w-1;++i) {
       /* B = (p<<16)+c */
@@ -77,14 +78,14 @@
       for (x = 0;x < n;++x) A[x] = (B[x]&~0xffff)|x;
       int32_sort(A,n); /* A = (id<<16)+p^(-1) */
 
-      for (x = 0;x < n;++x) A[x] = (A[x]<<16)|(B[x]&0xffff);
+      for (x = 0;x < n;++x) A[x] = (((uint32_t)A[x])<<16)|(B[x]&0xffff);
       /* A = p^(-1)<<16+c */
 
       if (i < w-2) {
         for (x = 0;x < n;++x) B[x] = (A[x]&~0xffff)|(B[x]>>16);
         /* B = (p^(-1)<<16)+p */
         int32_sort(B,n); /* B = (id<<16)+p^(-2) */
-        for (x = 0;x < n;++x) B[x] = (B[x]<<16)|(A[x]&0xffff);
+        for (x = 0;x < n;++x) B[x] = (((uint32_t)B[x])<<16)|(A[x]&0xffff);
         /* B = (p^(-2)<<16)+c */
       }
   
@@ -110,8 +111,8 @@
     out[pos>>3] ^= fj<<(pos&7);
     pos += step;
 
-    B[x] = (A[x]<<16)|Fx;
-    B[x+1] = (A[x+1]<<16)|Fx1;
+    B[x] = ((uint32_t)A[x]<<16)|Fx;
+    B[x+1] = ((uint32_t)A[x+1]<<16)|Fx1;
   }
   /* B = (pi^(-1)<<16)+F */
 
@@ -154,7 +155,7 @@
 static void layer(int16_t *p, const unsigned char *cb, int s, int n)
 {
   int i, j;
-  int stride = 1 << s;
+  int stride = 1 << (uint8_t)s;
   int index = 0;
   int16_t d, m;
 
@@ -179,11 +180,14 @@
 /* output position pos is by definition 1&(out[pos/8]>>(pos&7)) */
 void controlbitsfrompermutation(unsigned char *out,const int16 *pi,long long w,long long n)
 {
-  int32 temp[2*n];
-  int16 pi_test[n], diff;
+  PQCLEAN_VLA(int32, temp, 2*n);
+  PQCLEAN_VLA(int16, pi_test, n);
+  int16 diff;
   int i;
   unsigned char *ptr;
 
+  memset(pi_test, 0, n);
+
   while (1)
   {
     memset(out,0,(((2*w-1)*n/2)+7)/8);
