--- a/controlbits.c	
+++ b/controlbits.c	
@@ -3,6 +3,7 @@
 /* See also https://cr.yp.to/papers/controlbits-20200923.pdf */
 
 #include <string.h>
+#include "compat.h"
 #include "crypto_declassify.h"
 #include "controlbits.h"
 #include "int32_sort.h"
@@ -25,7 +26,7 @@
 #define q ((int16 *) (temp+n+n/4))
 /* q can start anywhere between temp+n and temp+n/2 */
 
-  long long x,i,j,k;
+  long long x,y,i,j,k;
 
   if (w == 1) {
     out[pos>>3] ^= pi[0]<<(pos&7);
@@ -38,15 +39,15 @@
   for (x = 0;x < n;++x) {
     int32 Ax = A[x];
     int32 px = Ax&0xffff;
-    int32 cx = int32_min(px,x);
-    B[x] = (px<<16)|cx;
+    int32 cx = int32_min(px,(int32)x);
+    B[x] = ((px)<<16)|cx;
   }
   /* B = (p<<16)+c */
 
-  for (x = 0;x < n;++x) A[x] = (A[x]<<16)|x; /* A = (pibar<<16)+id */
+  for (x = 0;x < n;++x) A[x] = (int32)((((uint32_t)A[x])<<16)|x); /* A = (pibar<<16)+id */
   int32_sort(A,n); /* A = (id<<16)+pibar^-1 */
 
-  for (x = 0;x < n;++x) A[x] = (A[x]<<16)+(B[x]>>16); /* A = (pibar^(-1)<<16)+pibar */
+  for (x = 0;x < n;++x) A[x] = (((uint32_t)A[x])<<16)+(B[x]>>16); /* A = (pibar^(-1)<<16)+pibar */
   int32_sort(A,n); /* A = (id<<16)+pibar^2 */
 
   if (w <= 10) {
@@ -55,10 +56,10 @@
     for (i = 1;i < w-1;++i) {
       /* B = (p<<10)+c */
 
-      for (x = 0;x < n;++x) A[x] = ((B[x]&~0x3ff)<<6)|x; /* A = (p<<16)+id */
+      for (x = 0;x < n;++x) A[x] = (int32)(((B[x]&~0x3ff)<<6)|x); /* A = (p<<16)+id */
       int32_sort(A,n); /* A = (id<<16)+p^{-1} */
 
-      for (x = 0;x < n;++x) A[x] = (A[x]<<20)|B[x]; /* A = (p^{-1}<<20)+(p<<10)+c */
+      for (x = 0;x < n;++x) A[x] = ((uint32_t)A[x]<<20)|B[x]; /* A = (p^{-1}<<20)+(p<<10)+c */
       int32_sort(A,n); /* A = (id<<20)+(pp<<10)+cp */
 
       for (x = 0;x < n;++x) {
@@ -69,22 +70,22 @@
     }
     for (x = 0;x < n;++x) B[x] &= 0x3ff;
   } else {
-    for (x = 0;x < n;++x) B[x] = (A[x]<<16)|(B[x]&0xffff);
+    for (x = 0;x < n;++x) B[x] = (((uint32_t)A[x])<<16)|(B[x]&0xffff);
 
     for (i = 1;i < w-1;++i) {
       /* B = (p<<16)+c */
 
-      for (x = 0;x < n;++x) A[x] = (B[x]&~0xffff)|x;
+      for (x = 0;x < n;++x) A[x] = (int32)((B[x]&~0xffff)|x);
       int32_sort(A,n); /* A = (id<<16)+p^(-1) */
 
-      for (x = 0;x < n;++x) A[x] = (A[x]<<16)|(B[x]&0xffff);
+      for (x = 0;x < n;++x) A[x] = (((uint32_t)A[x])<<16)|(B[x]&0xffff);
       /* A = p^(-1)<<16+c */
 
       if (i < w-2) {
         for (x = 0;x < n;++x) B[x] = (A[x]&~0xffff)|(B[x]>>16);
         /* B = (p^(-1)<<16)+p */
         int32_sort(B,n); /* B = (id<<16)+p^(-2) */
-        for (x = 0;x < n;++x) B[x] = (B[x]<<16)|(A[x]&0xffff);
+        for (x = 0;x < n;++x) B[x] = (((uint32_t)B[x])<<16)|(A[x]&0xffff);
         /* B = (p^(-2)<<16)+c */
       }
   
@@ -98,20 +99,20 @@
     for (x = 0;x < n;++x) B[x] &= 0xffff;
   }
 
-  for (x = 0;x < n;++x) A[x] = (((int32)pi[x])<<16)+x;
+  for (x = 0;x < n;++x) A[x] = (int32)((((int32)pi[x])<<16)+x);
   int32_sort(A,n); /* A = (id<<16)+pi^(-1) */
 
   for (j = 0;j < n/2;++j) {
-    long long x = 2*j;
+    x = 2*j;
     int32 fj = B[x]&1; /* f[j] */
-    int32 Fx = x+fj; /* F[x] */
+    int32 Fx = (int32)(x+fj); /* F[x] */
     int32 Fx1 = Fx^1; /* F[x+1] */
 
     out[pos>>3] ^= fj<<(pos&7);
     pos += step;
 
-    B[x] = (A[x]<<16)|Fx;
-    B[x+1] = (A[x+1]<<16)|Fx1;
+    B[x] = ((uint32_t)A[x]<<16)|Fx;
+    B[x+1] = ((uint32_t)A[x+1]<<16)|Fx1;
   }
   /* B = (pi^(-1)<<16)+F */
 
@@ -120,9 +121,9 @@
   pos += (2*w-3)*step*(n/2);
 
   for (k = 0;k < n/2;++k) {
-    long long y = 2*k;
+    y = 2*k;
     int32 lk = B[y]&1; /* l[k] */
-    int32 Ly = y+lk; /* L[y] */
+    int32 Ly = (int32)(y+lk); /* L[y] */
     int32 Ly1 = Ly^1; /* L[y+1] */
 
     out[pos>>3] ^= lk<<(pos&7);
@@ -154,7 +155,7 @@
 static void layer(int16_t *p, const unsigned char *cb, int s, int n)
 {
   int i, j;
-  int stride = 1 << s;
+  int stride = 1 << (uint8_t)(s & 0x1F);
   int index = 0;
   int16_t d, m;
 
@@ -179,31 +180,35 @@
 /* output position pos is by definition 1&(out[pos/8]>>(pos&7)) */
 void controlbitsfrompermutation(unsigned char *out,const int16 *pi,long long w,long long n)
 {
-  int32 temp[2*n];
-  int16 pi_test[n], diff;
+  PQCLEAN_VLA(int32, temp, (size_t)(2*n));
+  PQCLEAN_VLA(int16, pi_test, (size_t)n);
+  int16 diff;
   int i;
   unsigned char *ptr;
 
+  memset(temp, 0, (size_t)n*2);
+  memset(pi_test, 0, (size_t)n);
+
   while (1)
   {
-    memset(out,0,(((2*w-1)*n/2)+7)/8);
+    memset(out,0,(size_t)((((2*w-1)*n/2)+7)/8));
     cbrecursion(out,0,1,pi,w,n,temp);
 
     // check for correctness
 
     for (i = 0; i < n; i++)
-      pi_test[i] = i;
+      pi_test[i] = (int16)i;
 
     ptr = out;
     for (i = 0; i < w; i++)
     {
-      layer(pi_test, ptr, i, n);
+      layer(pi_test, ptr, i, (int32)n);
       ptr += n >> 4;
     }
 
-    for (i = w-2; i >= 0; i--)
+    for (i = (int)(w-2); i >= 0; i--)
     {
-      layer(pi_test, ptr, i, n);
+      layer(pi_test, ptr, i, (int32)n);
       ptr += n >> 4;
     }
 
